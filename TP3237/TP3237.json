[
    {
        "id": "2e0418cda4baf1e8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a9b5aea8ceb50365",
        "type": "debug",
        "z": "2e0418cda4baf1e8",
        "name": "msg.payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 440,
        "wires": []
    },
    {
        "id": "3f0dad7effca172a",
        "type": "inject",
        "z": "2e0418cda4baf1e8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "7e3295428acb70ab",
                "0554e091255b0877"
            ]
        ]
    },
    {
        "id": "9a740cf48311e2d0",
        "type": "function",
        "z": "2e0418cda4baf1e8",
        "name": "Convert.DATA",
        "func": "// Node-RED Function node\n\nfunction calculateTemperature(pdvValue) {\n    const GRADIENT = 0.1; // From datasheet\n    const OFFSET = 0;     // Implied by datasheet\n\n    // Calculate real temperature\n    const realTemperature = (pdvValue * GRADIENT) + OFFSET;\n\n    return realTemperature; // Return as a float\n}\n\n// Generate random ID (6 characters)\nfunction generateRandomId() {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n}\n\n// Get the value from input\nconst pdvValue = msg.payload.data.value; // This is now an integer (PDV1)\nconst temperature = calculateTemperature(pdvValue); // Convert to real temperature\nconst id = generateRandomId();\nconst timestamp = new Date().toISOString();\n\n// Construct payload\nmsg.payload = {\n    id: id,\n    temperature: parseFloat(temperature), // Ensure float representation\n    timestamp: timestamp\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 360,
        "wires": [
            [
                "a9b5aea8ceb50365",
                "df1602c763830e7f"
            ]
        ]
    },
    {
        "id": "7e3295428acb70ab",
        "type": "http request",
        "z": "2e0418cda4baf1e8",
        "name": "req.DATA1",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:3000/temperature1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 360,
        "wires": [
            [
                "9a740cf48311e2d0"
            ]
        ]
    },
    {
        "id": "0554e091255b0877",
        "type": "http request",
        "z": "2e0418cda4baf1e8",
        "name": "req.DATA2",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:3000/temperature2",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 560,
        "wires": [
            [
                "8bff4d481d86cd5d"
            ]
        ]
    },
    {
        "id": "8bff4d481d86cd5d",
        "type": "function",
        "z": "2e0418cda4baf1e8",
        "name": "Convert.DATA",
        "func": "// Node-RED Function node\n\nfunction calculateTemperature(pdvValue) {\n    const GRADIENT = 0.1; // From datasheet\n    const OFFSET = 0;     // Implied by datasheet\n\n    // Calculate real temperature\n    const realTemperature = (pdvValue * GRADIENT) + OFFSET;\n\n    return realTemperature; // Return as a float\n}\n\n// Generate random ID (6 characters)\nfunction generateRandomId() {\n    return Math.random().toString(36).substring(2, 8).toUpperCase();\n}\n\n// Get the value from input\nconst pdvValue = msg.payload.data.value; // This is now an integer (PDV1)\nconst temperature = calculateTemperature(pdvValue); // Convert to real temperature\nconst id = generateRandomId();\nconst timestamp = new Date().toISOString();\n\n// Construct payload\nmsg.payload = {\n    id: id,\n    temperature: parseFloat(temperature), // Ensure float representation\n    timestamp: timestamp\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 560,
        "wires": [
            [
                "a9b5aea8ceb50365"
            ]
        ]
    },
    {
        "id": "df1602c763830e7f",
        "type": "influxdb out",
        "z": "2e0418cda4baf1e8",
        "influxdb": "3f20df52ed01a11e",
        "name": "Temperature_Sensor_Data",
        "measurement": "Temperature_Measurement_Decanter_v1",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "Dev Team",
        "bucket": "DinayData",
        "x": 1100,
        "y": 580,
        "wires": []
    },
    {
        "id": "3f20df52ed01a11e",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "Temperature",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://us-east-1-1.aws.cloud2.influxdata.com",
        "timeout": "10",
        "rejectUnauthorized": true
    }
]